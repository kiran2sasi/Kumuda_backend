/* eslint-disable */
// tslint:disable
/**
 * Appraisal Service
 * Appraisal Service
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Express } from 'express'
import passport from 'passport'
import * as t from './types'
import * as v from '../../validation'
import { Api } from '../../models'

export default function(app: Express, impl: t.TeachingApi) {
	app.post(
		'/teachingProcess/create',
		function (req, res) {
			try {
				function __body() {
					const __contentType = req.get('Content-Type')
					const __mimeType = __contentType ? __contentType.replace(/;.*/, '') : undefined

					if (__mimeType === 'application/json') {
						return v.modelApiTeachingDataFromJson('body', req.body)
					}
					console.error(`Invalid request content type: ${__contentType}`)
					throw new Error(`Invalid request content type: ${__contentType}`)
				}

				impl.postTeachingProcessCreate(__body()).then(function (response) {
					if (response.status === 201) {
						let body: any
						try {
							body = v.modelApiTeachingDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.postTeachingProcessCreate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(201)
						res.send(body)
						return
					}
					if (response.status === 401) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.postTeachingProcessCreate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(401)
						res.send(body)
						return
					}
					if (response.status === 404) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.postTeachingProcessCreate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(404)
						res.send(body)
						return
					}
					if (response.status === 422) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.postTeachingProcessCreate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(422)
						res.send(body)
						return
					}

					console.log('Unsupported response in teaching.postTeachingProcessCreate', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in teaching.postTeachingProcessCreate', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

	app.delete(
		'/teachingProcess/delete',
		function (req, res) {
			try {
				impl.deleteTeachingProcessDelete(v.parseString('query.Id', req.query['Id'])).then(function (response) {
					if (response.status === 200) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.deleteTeachingProcessDelete', error)
							res.status(500)
							res.send()
							return
						}

						res.status(200)
						res.send(body)
						return
					}
					if (response.status === 401) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.deleteTeachingProcessDelete', error)
							res.status(500)
							res.send()
							return
						}

						res.status(401)
						res.send(body)
						return
					}
					if (response.status === 404) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.deleteTeachingProcessDelete', error)
							res.status(500)
							res.send()
							return
						}

						res.status(404)
						res.send(body)
						return
					}
					if (response.status === 422) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.deleteTeachingProcessDelete', error)
							res.status(500)
							res.send()
							return
						}

						res.status(422)
						res.send(body)
						return
					}

					console.log('Unsupported response in teaching.deleteTeachingProcessDelete', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in teaching.deleteTeachingProcessDelete', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

	app.get(
		'/teachingProcess/get',
		function (req, res) {
			try {
				impl.getTeachingProcessGet(v.parseString('query.Id', req.query['Id'])).then(function (response) {
					if (response.status === 200) {
						let body: any
						try {
							body = v.modelApiTeachingDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.getTeachingProcessGet', error)
							res.status(500)
							res.send()
							return
						}

						res.status(200)
						res.send(body)
						return
					}
					if (response.status === 401) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.getTeachingProcessGet', error)
							res.status(500)
							res.send()
							return
						}

						res.status(401)
						res.send(body)
						return
					}
					if (response.status === 404) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.getTeachingProcessGet', error)
							res.status(500)
							res.send()
							return
						}

						res.status(404)
						res.send(body)
						return
					}
					if (response.status === 422) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.getTeachingProcessGet', error)
							res.status(500)
							res.send()
							return
						}

						res.status(422)
						res.send(body)
						return
					}

					console.log('Unsupported response in teaching.getTeachingProcessGet', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in teaching.getTeachingProcessGet', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

	app.get(
		'/teachingProcess/getAll',
		function (req, res) {
			try {
				impl.getTeachingProcessGetAll().then(function (response) {
					if (response.status === 200) {
						let body: any
						try {
							body = v.modelApiTeachingPagedResultDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.getTeachingProcessGetAll', error)
							res.status(500)
							res.send()
							return
						}

						res.status(200)
						res.send(body)
						return
					}
					if (response.status === 401) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.getTeachingProcessGetAll', error)
							res.status(500)
							res.send()
							return
						}

						res.status(401)
						res.send(body)
						return
					}
					if (response.status === 404) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.getTeachingProcessGetAll', error)
							res.status(500)
							res.send()
							return
						}

						res.status(404)
						res.send(body)
						return
					}

					console.log('Unsupported response in teaching.getTeachingProcessGetAll', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in teaching.getTeachingProcessGetAll', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

	app.put(
		'/teachingProcess/update',
		function (req, res) {
			try {
				function __body() {
					const __contentType = req.get('Content-Type')
					const __mimeType = __contentType ? __contentType.replace(/;.*/, '') : undefined

					if (__mimeType === 'application/json') {
						return v.modelApiTeachingDataFromJson('body', req.body)
					}
					console.error(`Invalid request content type: ${__contentType}`)
					throw new Error(`Invalid request content type: ${__contentType}`)
				}

				impl.putTeachingProcessUpdate(v.parseString('query.Id', req.query['Id']), __body()).then(function (response) {
					if (response.status === 200) {
						let body: any
						try {
							body = v.modelApiTeachingDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.putTeachingProcessUpdate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(200)
						res.send(body)
						return
					}
					if (response.status === 401) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.putTeachingProcessUpdate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(401)
						res.send(body)
						return
					}
					if (response.status === 404) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.putTeachingProcessUpdate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(404)
						res.send(body)
						return
					}
					if (response.status === 422) {
						let body: any
						try {
							body = v.modelApiMessageDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in teaching.putTeachingProcessUpdate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(422)
						res.send(body)
						return
					}

					console.log('Unsupported response in teaching.putTeachingProcessUpdate', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in teaching.putTeachingProcessUpdate', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

}
